name: Release
on:
  release:
    types:
      - published

jobs:
  release-binary:
    runs-on: ubuntu-latest
    container:
      image: "golang:latest"
    strategy:
      matrix:
        os:
          - darwin
          - linux
        arch:
          - amd64
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Install go-task
        run: curl -sL https://taskfile.dev/install.sh | sh

      - name: Release
        run: GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} bin/task release

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v1-release
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: dist/*
          file_glob: true
          tag: ${{ github.ref }}
          overwrite: true

  release-docker:
    needs:
      - release-binary
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Prepare Image Metadata
        id: metadata
        run: |
          TAG=$(git describe --tags --exact-match)
          TS=$(date +%Y%m%d%H%M%S)
          echo ::set-output name=tag::${TAG}
          echo ::set-output name=image::pomerium/pomerium-operator
          echo ::set-output name=timestamp::${TS}
          echo ::set-output name=name::pomerium-operator

      - uses: azure/docker-login@v1
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker Publish
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.metadata.outputs.image }}:${{ steps.metadata.outputs.tag }}
          labels: |
            org.opencontainers.image.created=${{ steps.metadata.outputs.timestamp }}
            org.opencontainers.image.name=${{ steps.metadata.outputs.name }}
            org.opencontainers.image.revision=${{ github.sha }}

      - name: Docker Publish - Latest
        if: "!contains(steps.metadata.outputs.tag, 'rc')"
        run: |
          docker tag ${{ steps.metadata.outputs.image }}:${{ steps.metadata.outputs.tag }} ${{ steps.metadata.outputs.image }}:latest
          docker push ${{ steps.metadata.outputs.image }}:latest
